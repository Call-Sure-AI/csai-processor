"""twilio call logging tables

Revision ID: 8e505dff2ae6
Revises: 
Create Date: 2025-09-05 02:35:10.600896

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8e505dff2ae6'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('CeleryTaskMap',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('task_id', sa.String(length=128), nullable=False),
    sa.Column('call_sid', sa.String(length=255), nullable=True),
    sa.Column('to_number', sa.String(length=32), nullable=True),
    sa.Column('scheduled_delay', sa.Integer(), nullable=True),
    sa.Column('success', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_CeleryTaskMap_call_sid'), 'CeleryTaskMap', ['call_sid'], unique=False)
    op.create_index(op.f('ix_CeleryTaskMap_task_id'), 'CeleryTaskMap', ['task_id'], unique=True)
    op.create_table('CallEvent',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('call_id', sa.String(), nullable=True),
    sa.Column('call_sid', sa.String(length=255), nullable=False),
    sa.Column('event', sa.String(length=64), nullable=False),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('occurred_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['call_id'], ['Call.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_CallEvent_call_sid'), 'CallEvent', ['call_sid'], unique=False)
    op.create_table('ConversationTurn',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('call_id', sa.String(), nullable=True),
    sa.Column('call_sid', sa.String(length=255), nullable=False),
    sa.Column('role', sa.String(length=16), nullable=True),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['call_id'], ['Call.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ConversationTurn_call_sid'), 'ConversationTurn', ['call_sid'], unique=False)
    op.drop_index(op.f('idx_whatsapp_templates_business_id'), table_name='whatsapp_templates')
    op.drop_index(op.f('idx_whatsapp_templates_name'), table_name='whatsapp_templates')
    op.drop_index(op.f('idx_whatsapp_templates_status'), table_name='whatsapp_templates')
    op.drop_table('whatsapp_templates')
    op.drop_table('notification_logs')
    op.drop_index(op.f('idx_whatsapp_webhooks_business_id'), table_name='whatsapp_webhooks')
    op.drop_index(op.f('idx_whatsapp_webhooks_created_at'), table_name='whatsapp_webhooks')
    op.drop_index(op.f('idx_whatsapp_webhooks_event_type'), table_name='whatsapp_webhooks')
    op.drop_index(op.f('idx_whatsapp_webhooks_processed'), table_name='whatsapp_webhooks')
    op.drop_table('whatsapp_webhooks')
    op.drop_index(op.f('ix_taskqueue_company_id'), table_name='TaskQueue')
    op.drop_index(op.f('ix_taskqueue_status_retry'), table_name='TaskQueue')
    op.drop_index(op.f('ix_taskqueue_task_type'), table_name='TaskQueue')
    op.drop_table('TaskQueue')
    op.drop_index(op.f('idx_whatsapp_clients_business_id'), table_name='whatsapp_clients')
    op.drop_index(op.f('idx_whatsapp_clients_created_at'), table_name='whatsapp_clients')
    op.drop_index(op.f('idx_whatsapp_clients_status'), table_name='whatsapp_clients')
    op.drop_table('whatsapp_clients')
    op.drop_index(op.f('User_email_key'), table_name='User')
    op.drop_table('User')
    op.drop_table('calendar_blocks')
    op.drop_table('_prisma_migrations')
    op.drop_index(op.f('idx_whatsapp_messages_business_id'), table_name='whatsapp_messages')
    op.drop_index(op.f('idx_whatsapp_messages_created_at'), table_name='whatsapp_messages')
    op.drop_index(op.f('idx_whatsapp_messages_direction'), table_name='whatsapp_messages')
    op.drop_index(op.f('idx_whatsapp_messages_message_id'), table_name='whatsapp_messages')
    op.drop_index(op.f('idx_whatsapp_messages_status'), table_name='whatsapp_messages')
    op.drop_index(op.f('idx_whatsapp_messages_to_phone'), table_name='whatsapp_messages')
    op.drop_table('whatsapp_messages')
    op.drop_index(op.f('OTP_email_idx'), table_name='OTP')
    op.drop_table('OTP')
    op.drop_table('campaign_metrics_current')
    op.drop_table('Account')
    op.drop_index(op.f('idx_conversation_agent_id'), table_name='conversation')
    op.drop_index(op.f('idx_conversation_call_id'), table_name='conversation')
    op.drop_index(op.f('idx_conversation_created_at'), table_name='conversation')
    op.drop_table('conversation')
    op.drop_table('campaign_call_status')
    op.drop_index(op.f('idx_conversation_outcome_agent_id'), table_name='conversation_outcome')
    op.drop_index(op.f('idx_conversation_outcome_created_at'), table_name='conversation_outcome')
    op.drop_index(op.f('idx_conversation_outcome_outcome'), table_name='conversation_outcome')
    op.drop_table('conversation_outcome')
    op.drop_index(op.f('idx_email_templates_company'), table_name='email_templates')
    op.drop_index(op.f('idx_email_templates_default'), table_name='email_templates', postgresql_where='(is_default = true)')
    op.drop_index(op.f('idx_email_templates_type'), table_name='email_templates')
    op.drop_table('email_templates')
    op.drop_index(op.f('Activity_created_at_idx'), table_name='Activity')
    op.drop_index(op.f('Activity_entity_type_entity_id_idx'), table_name='Activity')
    op.drop_index(op.f('Activity_user_id_idx'), table_name='Activity')
    op.drop_table('Activity')
    op.drop_index(op.f('idx_campaign_call_settings'), table_name='campaign', postgresql_using='gin')
    op.drop_index(op.f('idx_campaign_company_id'), table_name='campaign')
    op.drop_index(op.f('idx_campaign_email_settings'), table_name='campaign', postgresql_using='gin')
    op.drop_index(op.f('idx_campaign_schedule_settings'), table_name='campaign', postgresql_using='gin')
    op.drop_table('campaign')
    op.drop_index(op.f('idx_activities_created_at'), table_name='activities')
    op.drop_index(op.f('idx_activities_entity_type'), table_name='activities')
    op.drop_index(op.f('idx_activities_user_id'), table_name='activities')
    op.drop_table('activities')
    op.drop_index(op.f('idx_campaign_activity_campaign_id'), table_name='campaign_activity')
    op.drop_index(op.f('idx_campaign_activity_lead_id'), table_name='campaign_activity')
    op.drop_table('campaign_activity')
    op.drop_index(op.f('CompanyMember_company_id_idx'), table_name='CompanyMember')
    op.drop_index(op.f('CompanyMember_user_id_company_id_key'), table_name='CompanyMember')
    op.drop_index(op.f('CompanyMember_user_id_idx'), table_name='CompanyMember')
    op.drop_table('CompanyMember')
    op.drop_index(op.f('idx_invitations_company_id'), table_name='invitations')
    op.drop_index(op.f('idx_invitations_email'), table_name='invitations')
    op.drop_index(op.f('idx_invitations_expires_at'), table_name='invitations')
    op.drop_index(op.f('idx_invitations_status'), table_name='invitations')
    op.drop_index(op.f('idx_invitations_token'), table_name='invitations')
    op.drop_table('invitations')
    op.drop_table('call_log')
    op.drop_table('VerificationToken')
    op.drop_table('campaign_metrics_daily')
    op.drop_table('campaign_agents')
    op.drop_table('calendar_events')
    op.drop_index(op.f('idx_calendar_integrations_active'), table_name='calendar_integrations')
    op.drop_index(op.f('idx_calendar_integrations_company'), table_name='calendar_integrations')
    op.drop_index(op.f('idx_calendar_integrations_type'), table_name='calendar_integrations')
    op.drop_index(op.f('idx_calendar_integrations_user'), table_name='calendar_integrations')
    op.drop_table('calendar_integrations')
    op.drop_index(op.f('Invitation_company_id_idx'), table_name='Invitation')
    op.drop_index(op.f('Invitation_email_idx'), table_name='Invitation')
    op.drop_index(op.f('Invitation_status_idx'), table_name='Invitation')
    op.drop_index(op.f('Invitation_token_idx'), table_name='Invitation')
    op.drop_index(op.f('Invitation_token_key'), table_name='Invitation')
    op.drop_table('Invitation')
    op.drop_table('leads')
    op.drop_index(op.f('idx_booking_campaign'), table_name='booking')
    op.drop_index(op.f('idx_booking_slot_times'), table_name='booking')
    op.drop_index(op.f('idx_booking_status'), table_name='booking')
    op.drop_table('booking')
    op.drop_index(op.f('prompt_template_agent_type_idx'), table_name='PromptTemplate')
    op.drop_index(op.f('prompt_template_category_idx'), table_name='PromptTemplate')
    op.drop_index(op.f('prompt_template_company_id_idx'), table_name='PromptTemplate')
    op.drop_table('PromptTemplate')
    op.drop_index(op.f('idx_campaign_lead_campaign_id'), table_name='campaign_lead')
    op.drop_index(op.f('idx_campaign_lead_status'), table_name='campaign_lead')
    op.drop_table('campaign_lead')
    op.drop_index(op.f('Session_sessionToken_key'), table_name='Session')
    op.drop_table('Session')
    op.alter_column('Agent', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('Agent', 'type',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.Enum('base', 'sales', 'support', 'technical', 'custom', name='agenttype'),
               existing_nullable=False)
    op.alter_column('Agent', 'company_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('Agent', 'files',
               existing_type=postgresql.ARRAY(sa.VARCHAR(length=255)),
               server_default=None,
               existing_nullable=True)
    op.alter_column('Agent', 'additional_context',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('Agent', 'advanced_settings',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('Agent', 'knowledge_base_ids',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               server_default=None,
               type_=postgresql.ARRAY(sa.String()),
               existing_nullable=True)
    op.alter_column('Agent', 'database_integration_ids',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               server_default=None,
               type_=postgresql.ARRAY(sa.String()),
               existing_nullable=True)
    op.alter_column('Agent', 'search_config',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=True)
    op.alter_column('Agent', 'confidence_threshold',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               server_default=None,
               existing_nullable=True)
    op.alter_column('Agent', 'max_response_tokens',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('Agent', 'temperature',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               server_default=None,
               existing_nullable=True)
    op.alter_column('Agent', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               nullable=True)
    op.alter_column('Agent', 'total_interactions',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('Agent', 'average_confidence',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               server_default=None,
               existing_nullable=True)
    op.alter_column('Agent', 'success_rate',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               server_default=None,
               existing_nullable=True)
    op.alter_column('Agent', 'average_response_time',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               server_default=None,
               existing_nullable=True)
    op.alter_column('Agent', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=None,
               existing_nullable=True)
    op.alter_column('Agent', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=None,
               existing_nullable=True)
    op.alter_column('Agent', 'image_processing_enabled',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('Agent', 'image_processing_config',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=True)
    op.drop_index(op.f('agent_template_id_idx'), table_name='Agent')
    op.drop_index(op.f('idx_agents_user_id'), table_name='Agent')
    op.drop_constraint(op.f('Agent_user_id_fkey'), 'Agent', type_='foreignkey')
    op.drop_constraint(op.f('fk_agent_template'), 'Agent', type_='foreignkey')
    op.drop_constraint(op.f('Agent_company_id_fkey'), 'Agent', type_='foreignkey')
    op.create_foreign_key(None, 'Agent', 'Company', ['company_id'], ['id'])
    op.alter_column('AgentInteraction', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('AgentInteraction', 'agent_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=True)
    op.alter_column('AgentInteraction', 'conversation_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=True)
    op.alter_column('AgentInteraction', 'previous_agent_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('AgentInteraction', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=None,
               nullable=True)
    op.drop_index(op.f('AgentInteraction_agent_id_idx'), table_name='AgentInteraction')
    op.drop_index(op.f('AgentInteraction_conversation_id_idx'), table_name='AgentInteraction')
    op.drop_constraint(op.f('AgentInteraction_previous_agent_id_fkey'), 'AgentInteraction', type_='foreignkey')
    op.drop_constraint(op.f('AgentInteraction_agent_id_fkey'), 'AgentInteraction', type_='foreignkey')
    op.drop_constraint(op.f('AgentInteraction_conversation_id_fkey'), 'AgentInteraction', type_='foreignkey')
    op.create_foreign_key(None, 'AgentInteraction', 'Agent', ['previous_agent_id'], ['id'])
    op.create_foreign_key(None, 'AgentInteraction', 'Conversation', ['conversation_id'], ['id'])
    op.create_foreign_key(None, 'AgentInteraction', 'Agent', ['agent_id'], ['id'])
    op.drop_column('AgentInteraction', 'last_task_id')
    op.add_column('Call', sa.Column('direction', sa.String(length=16), nullable=True))
    op.add_column('Call', sa.Column('peer_id', sa.String(length=128), nullable=True))
    op.add_column('Call', sa.Column('company_api_key', sa.String(length=255), nullable=True))
    op.add_column('Call', sa.Column('agent_id', sa.String(length=255), nullable=True))
    op.alter_column('Call', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('Call', 'company_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('Call', 'conversation_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('Call', 'cost',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               server_default=None,
               existing_nullable=True)
    op.alter_column('Call', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=None,
               existing_nullable=True)
    op.alter_column('Call', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=None,
               existing_nullable=True)
    op.drop_index(op.f('Call_call_sid_key'), table_name='Call')
    op.drop_index(op.f('idx_calls_company_id'), table_name='Call')
    op.drop_index(op.f('idx_calls_created_at'), table_name='Call')
    op.drop_index(op.f('idx_calls_status'), table_name='Call')
    op.create_unique_constraint(None, 'Call', ['call_sid'])
    op.drop_constraint(op.f('Call_company_id_fkey'), 'Call', type_='foreignkey')
    op.create_foreign_key(None, 'Call', 'Conversation', ['conversation_id'], ['id'])
    op.create_foreign_key(None, 'Call', 'Company', ['company_id'], ['id'])
    op.drop_column('Call', 'last_task_id')
    op.alter_column('Company', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('Company', 'api_key',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.alter_column('Company', 'email',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               nullable=True)
    op.alter_column('Company', 'settings',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               nullable=False)
    op.alter_column('Company', 'prompt_templates',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=None,
               nullable=False)
    op.alter_column('Company', 'active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('Company', 'qdrant_collection_name',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.alter_column('Company', 'vector_dimension',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('Company', 'total_conversations',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('Company', 'average_response_time',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               server_default=None,
               existing_nullable=True)
    op.alter_column('Company', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=None,
               existing_nullable=True)
    op.alter_column('Company', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=None,
               existing_nullable=True)
    op.alter_column('Company', 'image_storage_limit',
               existing_type=sa.BIGINT(),
               server_default=None,
               type_=sa.Integer(),
               existing_nullable=True)
    op.alter_column('Company', 'current_image_storage',
               existing_type=sa.BIGINT(),
               server_default=None,
               type_=sa.Integer(),
               existing_nullable=True)
    op.alter_column('Company', 'image_config',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=True)
    op.drop_index(op.f('Company_api_key_key'), table_name='Company')
    op.drop_index(op.f('Company_email_key'), table_name='Company')
    op.drop_index(op.f('Company_phone_number_key'), table_name='Company')
    op.drop_index(op.f('Company_qdrant_collection_name_key'), table_name='Company')
    op.drop_index(op.f('idx_companies_user_id'), table_name='Company')
    op.create_unique_constraint(None, 'Company', ['phone_number'])
    op.create_unique_constraint(None, 'Company', ['email'])
    op.create_unique_constraint(None, 'Company', ['qdrant_collection_name'])
    op.create_unique_constraint(None, 'Company', ['api_key'])
    op.drop_constraint(op.f('Company_user_id_fkey'), 'Company', type_='foreignkey')
    op.drop_column('Company', 'task_success_rate')
    op.drop_column('Company', 'average_task_latency')
    op.drop_column('Company', 'logo')
    op.drop_column('Company', 'task_count')
    op.drop_column('Company', 'address')
    op.drop_column('Company', 'business_name')
    op.alter_column('Conversation', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('Conversation', 'company_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('Conversation', 'current_agent_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('Conversation', 'history',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=None,
               nullable=False)
    op.alter_column('Conversation', 'meta_data',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('Conversation', 'duration',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               server_default=None,
               existing_nullable=True)
    op.alter_column('Conversation', 'messages_count',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('Conversation', 'status',
               existing_type=sa.VARCHAR(length=50),
               server_default=None,
               existing_nullable=True)
    op.alter_column('Conversation', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=None,
               existing_nullable=True)
    op.alter_column('Conversation', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=None,
               existing_nullable=True)
    op.drop_constraint(op.f('Conversation_company_id_fkey'), 'Conversation', type_='foreignkey')
    op.drop_constraint(op.f('Conversation_current_agent_id_fkey'), 'Conversation', type_='foreignkey')
    op.create_foreign_key(None, 'Conversation', 'Company', ['company_id'], ['id'])
    op.create_foreign_key(None, 'Conversation', 'Agent', ['current_agent_id'], ['id'])
    op.drop_column('Conversation', 'last_task_id')
    op.alter_column('DatabaseIntegration', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('DatabaseIntegration', 'company_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=True)
    op.alter_column('DatabaseIntegration', 'type',
               existing_type=sa.TEXT(),
               type_=sa.Enum('POSTGRESQL', 'MYSQL', 'MSSQL', 'ORACLE', 'SQLITE', name='databaseintegrationtype'),
               existing_nullable=False)
    op.alter_column('DatabaseIntegration', 'connection_details',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('DatabaseIntegration', 'schema_mapping',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=None,
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('DatabaseIntegration', 'included_tables',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               server_default=None,
               type_=postgresql.ARRAY(sa.String()),
               existing_nullable=True)
    op.alter_column('DatabaseIntegration', 'excluded_tables',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               server_default=None,
               type_=postgresql.ARRAY(sa.String()),
               existing_nullable=True)
    op.alter_column('DatabaseIntegration', 'sync_frequency',
               existing_type=sa.VARCHAR(length=50),
               server_default=None,
               existing_nullable=True)
    op.alter_column('DatabaseIntegration', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('DatabaseIntegration', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=None,
               existing_nullable=True)
    op.alter_column('DatabaseIntegration', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=None,
               existing_nullable=True)
    op.drop_index(op.f('DatabaseIntegration_company_id_idx'), table_name='DatabaseIntegration')
    op.drop_constraint(op.f('DatabaseIntegration_company_id_fkey'), 'DatabaseIntegration', type_='foreignkey')
    op.create_foreign_key(None, 'DatabaseIntegration', 'Company', ['company_id'], ['id'])
    op.alter_column('Document', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('Document', 'company_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('Document', 'agent_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('Document', 'type',
               existing_type=sa.TEXT(),
               type_=sa.Enum('faq', 'product', 'policy', 'technical', 'custom', 'image', name='documenttype'),
               existing_nullable=False)
    op.alter_column('Document', 'is_image',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('Document', 'chunk_count',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('Document', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=None,
               existing_nullable=True)
    op.alter_column('Document', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=None,
               existing_nullable=True)
    op.drop_index(op.f('Document_agent_id_idx'), table_name='Document')
    op.drop_index(op.f('Document_company_id_idx'), table_name='Document')
    op.drop_constraint(op.f('Document_company_id_fkey'), 'Document', type_='foreignkey')
    op.drop_constraint(op.f('Document_agent_id_fkey'), 'Document', type_='foreignkey')
    op.create_foreign_key(None, 'Document', 'Company', ['company_id'], ['id'])
    op.create_foreign_key(None, 'Document', 'Agent', ['agent_id'], ['id'])
    op.alter_column('ImageProcessingJob', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('ImageProcessingJob', 'document_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=True)
    op.alter_column('ImageProcessingJob', 'company_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=True)
    op.alter_column('ImageProcessingJob', 'agent_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=True)
    op.alter_column('ImageProcessingJob', 'status',
               existing_type=sa.VARCHAR(length=50),
               server_default=None,
               nullable=True)
    op.alter_column('ImageProcessingJob', 'processing_config',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('ImageProcessingJob', 'results',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('ImageProcessingJob', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=None,
               nullable=True)
    op.alter_column('ImageProcessingJob', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=None,
               nullable=True)
    op.drop_index(op.f('ImageProcessingJob_agent_id_idx'), table_name='ImageProcessingJob')
    op.drop_index(op.f('ImageProcessingJob_company_id_idx'), table_name='ImageProcessingJob')
    op.drop_index(op.f('ImageProcessingJob_document_id_idx'), table_name='ImageProcessingJob')
    op.drop_index(op.f('ImageProcessingJob_status_idx'), table_name='ImageProcessingJob')
    op.drop_constraint(op.f('ImageProcessingJob_document_id_fkey'), 'ImageProcessingJob', type_='foreignkey')
    op.drop_constraint(op.f('ImageProcessingJob_company_id_fkey'), 'ImageProcessingJob', type_='foreignkey')
    op.drop_constraint(op.f('ImageProcessingJob_agent_id_fkey'), 'ImageProcessingJob', type_='foreignkey')
    op.create_foreign_key(None, 'ImageProcessingJob', 'Company', ['company_id'], ['id'])
    op.create_foreign_key(None, 'ImageProcessingJob', 'Document', ['document_id'], ['id'])
    op.create_foreign_key(None, 'ImageProcessingJob', 'Agent', ['agent_id'], ['id'])
    op.add_column('Ticket', sa.Column('ticket_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.alter_column('Ticket', 'id',
               existing_type=sa.VARCHAR(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('Ticket', 'status',
               existing_type=sa.VARCHAR(),
               server_default=None,
               type_=sa.Enum('NEW', 'OPEN', 'IN_PROGRESS', 'RESOLVED', 'CLOSED', name='ticketstatus'),
               existing_nullable=False)
    op.alter_column('Ticket', 'priority',
               existing_type=sa.VARCHAR(),
               server_default=None,
               type_=sa.Enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='ticketpriority'),
               existing_nullable=False)
    op.alter_column('Ticket', 'source',
               existing_type=sa.VARCHAR(),
               server_default=None,
               type_=sa.Enum('EMAIL', 'PHONE', 'CHAT', 'WEB_FORM', 'AUTO_GENERATED', name='ticketsource'),
               existing_nullable=False)
    op.alter_column('Ticket', 'tags',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=postgresql.ARRAY(sa.String()),
               existing_nullable=True)
    op.alter_column('Ticket', 'auto_resolved',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('Ticket', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('Ticket', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=None,
               existing_nullable=True)
    op.drop_index(op.f('idx_ticket_company_id'), table_name='Ticket')
    op.drop_index(op.f('idx_ticket_created_at'), table_name='Ticket')
    op.drop_index(op.f('idx_ticket_status'), table_name='Ticket')
    op.drop_column('Ticket', 'meta_data')
    op.alter_column('TicketNote', 'id',
               existing_type=sa.VARCHAR(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('TicketNote', 'is_internal',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('TicketNote', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=None,
               existing_nullable=True)
    op.drop_index(op.f('idx_ticketnote_ticket_id'), table_name='TicketNote')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('idx_ticketnote_ticket_id'), 'TicketNote', ['ticket_id'], unique=False)
    op.alter_column('TicketNote', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('now()'),
               existing_nullable=True)
    op.alter_column('TicketNote', 'is_internal',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=True)
    op.alter_column('TicketNote', 'id',
               existing_type=sa.VARCHAR(),
               server_default=sa.text('(gen_random_uuid())::text'),
               existing_nullable=False)
    op.add_column('Ticket', sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.create_index(op.f('idx_ticket_status'), 'Ticket', ['status'], unique=False)
    op.create_index(op.f('idx_ticket_created_at'), 'Ticket', ['created_at'], unique=False)
    op.create_index(op.f('idx_ticket_company_id'), 'Ticket', ['company_id'], unique=False)
    op.alter_column('Ticket', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('now()'),
               existing_nullable=True)
    op.alter_column('Ticket', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('now()'),
               existing_nullable=True)
    op.alter_column('Ticket', 'auto_resolved',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=True)
    op.alter_column('Ticket', 'tags',
               existing_type=postgresql.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('Ticket', 'source',
               existing_type=sa.Enum('EMAIL', 'PHONE', 'CHAT', 'WEB_FORM', 'AUTO_GENERATED', name='ticketsource'),
               server_default=sa.text("'auto_generated'::character varying"),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.alter_column('Ticket', 'priority',
               existing_type=sa.Enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='ticketpriority'),
               server_default=sa.text("'medium'::character varying"),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.alter_column('Ticket', 'status',
               existing_type=sa.Enum('NEW', 'OPEN', 'IN_PROGRESS', 'RESOLVED', 'CLOSED', name='ticketstatus'),
               server_default=sa.text("'new'::character varying"),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.alter_column('Ticket', 'id',
               existing_type=sa.VARCHAR(),
               server_default=sa.text('(\'TKT-\'::text || upper("substring"((gen_random_uuid())::text, 1, 8)))'),
               existing_nullable=False)
    op.drop_column('Ticket', 'ticket_metadata')
    op.drop_constraint(None, 'ImageProcessingJob', type_='foreignkey')
    op.drop_constraint(None, 'ImageProcessingJob', type_='foreignkey')
    op.drop_constraint(None, 'ImageProcessingJob', type_='foreignkey')
    op.create_foreign_key(op.f('ImageProcessingJob_agent_id_fkey'), 'ImageProcessingJob', 'Agent', ['agent_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key(op.f('ImageProcessingJob_company_id_fkey'), 'ImageProcessingJob', 'Company', ['company_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key(op.f('ImageProcessingJob_document_id_fkey'), 'ImageProcessingJob', 'Document', ['document_id'], ['id'], onupdate='CASCADE', ondelete='RESTRICT')
    op.create_index(op.f('ImageProcessingJob_status_idx'), 'ImageProcessingJob', ['status'], unique=False)
    op.create_index(op.f('ImageProcessingJob_document_id_idx'), 'ImageProcessingJob', ['document_id'], unique=False)
    op.create_index(op.f('ImageProcessingJob_company_id_idx'), 'ImageProcessingJob', ['company_id'], unique=False)
    op.create_index(op.f('ImageProcessingJob_agent_id_idx'), 'ImageProcessingJob', ['agent_id'], unique=False)
    op.alter_column('ImageProcessingJob', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               nullable=False)
    op.alter_column('ImageProcessingJob', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               nullable=False)
    op.alter_column('ImageProcessingJob', 'results',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('ImageProcessingJob', 'processing_config',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('ImageProcessingJob', 'status',
               existing_type=sa.VARCHAR(length=50),
               server_default=sa.text("'pending'::character varying"),
               nullable=False)
    op.alter_column('ImageProcessingJob', 'agent_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('ImageProcessingJob', 'company_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('ImageProcessingJob', 'document_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('ImageProcessingJob', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint(None, 'Document', type_='foreignkey')
    op.drop_constraint(None, 'Document', type_='foreignkey')
    op.create_foreign_key(op.f('Document_agent_id_fkey'), 'Document', 'Agent', ['agent_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key(op.f('Document_company_id_fkey'), 'Document', 'Company', ['company_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_index(op.f('Document_company_id_idx'), 'Document', ['company_id'], unique=False)
    op.create_index(op.f('Document_agent_id_idx'), 'Document', ['agent_id'], unique=False)
    op.alter_column('Document', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=True)
    op.alter_column('Document', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=True)
    op.alter_column('Document', 'chunk_count',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               existing_nullable=True)
    op.alter_column('Document', 'is_image',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=True)
    op.alter_column('Document', 'type',
               existing_type=sa.Enum('faq', 'product', 'policy', 'technical', 'custom', 'image', name='documenttype'),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('Document', 'agent_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('Document', 'company_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('Document', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint(None, 'DatabaseIntegration', type_='foreignkey')
    op.create_foreign_key(op.f('DatabaseIntegration_company_id_fkey'), 'DatabaseIntegration', 'Company', ['company_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_index(op.f('DatabaseIntegration_company_id_idx'), 'DatabaseIntegration', ['company_id'], unique=False)
    op.alter_column('DatabaseIntegration', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=True)
    op.alter_column('DatabaseIntegration', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=True)
    op.alter_column('DatabaseIntegration', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=True)
    op.alter_column('DatabaseIntegration', 'sync_frequency',
               existing_type=sa.VARCHAR(length=50),
               server_default=sa.text("'daily'::character varying"),
               existing_nullable=True)
    op.alter_column('DatabaseIntegration', 'excluded_tables',
               existing_type=postgresql.ARRAY(sa.String()),
               server_default=sa.text('ARRAY[]::text[]'),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('DatabaseIntegration', 'included_tables',
               existing_type=postgresql.ARRAY(sa.String()),
               server_default=sa.text('ARRAY[]::text[]'),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('DatabaseIntegration', 'schema_mapping',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=sa.text("'{}'::json"),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('DatabaseIntegration', 'connection_details',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('DatabaseIntegration', 'type',
               existing_type=sa.Enum('POSTGRESQL', 'MYSQL', 'MSSQL', 'ORACLE', 'SQLITE', name='databaseintegrationtype'),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('DatabaseIntegration', 'company_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('DatabaseIntegration', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.add_column('Conversation', sa.Column('last_task_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'Conversation', type_='foreignkey')
    op.drop_constraint(None, 'Conversation', type_='foreignkey')
    op.create_foreign_key(op.f('Conversation_current_agent_id_fkey'), 'Conversation', 'Agent', ['current_agent_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key(op.f('Conversation_company_id_fkey'), 'Conversation', 'Company', ['company_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.alter_column('Conversation', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=True)
    op.alter_column('Conversation', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=True)
    op.alter_column('Conversation', 'status',
               existing_type=sa.VARCHAR(length=50),
               server_default=sa.text("'active'::character varying"),
               existing_nullable=True)
    op.alter_column('Conversation', 'messages_count',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               existing_nullable=True)
    op.alter_column('Conversation', 'duration',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               server_default=sa.text('0.0'),
               existing_nullable=True)
    op.alter_column('Conversation', 'meta_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('Conversation', 'history',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=sa.text("'[]'::jsonb"),
               nullable=True)
    op.alter_column('Conversation', 'current_agent_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('Conversation', 'company_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('Conversation', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.add_column('Company', sa.Column('business_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('Company', sa.Column('address', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('Company', sa.Column('task_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False))
    op.add_column('Company', sa.Column('logo', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('Company', sa.Column('average_task_latency', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('Company', sa.Column('task_success_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('Company_user_id_fkey'), 'Company', 'User', ['user_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_constraint(None, 'Company', type_='unique')
    op.drop_constraint(None, 'Company', type_='unique')
    op.drop_constraint(None, 'Company', type_='unique')
    op.drop_constraint(None, 'Company', type_='unique')
    op.create_index(op.f('idx_companies_user_id'), 'Company', ['user_id'], unique=False)
    op.create_index(op.f('Company_qdrant_collection_name_key'), 'Company', ['qdrant_collection_name'], unique=True)
    op.create_index(op.f('Company_phone_number_key'), 'Company', ['phone_number'], unique=True)
    op.create_index(op.f('Company_email_key'), 'Company', ['email'], unique=True)
    op.create_index(op.f('Company_api_key_key'), 'Company', ['api_key'], unique=True)
    op.alter_column('Company', 'image_config',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=sa.text('\'{"max_image_size": 10485760, "supported_formats": ["image/jpeg", "image/png", "image/gif"], "enable_auto_tagging": true, "retention_period_days": 365, "enable_explicit_content_detection": true}\'::jsonb'),
               existing_nullable=True)
    op.alter_column('Company', 'current_image_storage',
               existing_type=sa.Integer(),
               server_default=sa.text('0'),
               type_=sa.BIGINT(),
               existing_nullable=True)
    op.alter_column('Company', 'image_storage_limit',
               existing_type=sa.Integer(),
               server_default=sa.text("'10737418240'::bigint"),
               type_=sa.BIGINT(),
               existing_nullable=True)
    op.alter_column('Company', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=True)
    op.alter_column('Company', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=True)
    op.alter_column('Company', 'average_response_time',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               server_default=sa.text('0.0'),
               existing_nullable=True)
    op.alter_column('Company', 'total_conversations',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               existing_nullable=True)
    op.alter_column('Company', 'vector_dimension',
               existing_type=sa.INTEGER(),
               server_default=sa.text('1536'),
               existing_nullable=True)
    op.alter_column('Company', 'qdrant_collection_name',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('Company', 'active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=True)
    op.alter_column('Company', 'prompt_templates',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=sa.text("'{}'::jsonb"),
               nullable=True)
    op.alter_column('Company', 'settings',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               nullable=True)
    op.alter_column('Company', 'email',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('Company', 'api_key',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.alter_column('Company', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.add_column('Call', sa.Column('last_task_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'Call', type_='foreignkey')
    op.drop_constraint(None, 'Call', type_='foreignkey')
    op.create_foreign_key(op.f('Call_company_id_fkey'), 'Call', 'Company', ['company_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_constraint(None, 'Call', type_='unique')
    op.create_index(op.f('idx_calls_status'), 'Call', ['status'], unique=False)
    op.create_index(op.f('idx_calls_created_at'), 'Call', ['created_at'], unique=False)
    op.create_index(op.f('idx_calls_company_id'), 'Call', ['company_id'], unique=False)
    op.create_index(op.f('Call_call_sid_key'), 'Call', ['call_sid'], unique=True)
    op.alter_column('Call', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=True)
    op.alter_column('Call', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=True)
    op.alter_column('Call', 'cost',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               server_default=sa.text('0.0'),
               existing_nullable=True)
    op.alter_column('Call', 'conversation_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('Call', 'company_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('Call', 'id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('Call', 'agent_id')
    op.drop_column('Call', 'company_api_key')
    op.drop_column('Call', 'peer_id')
    op.drop_column('Call', 'direction')
    op.add_column('AgentInteraction', sa.Column('last_task_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'AgentInteraction', type_='foreignkey')
    op.drop_constraint(None, 'AgentInteraction', type_='foreignkey')
    op.drop_constraint(None, 'AgentInteraction', type_='foreignkey')
    op.create_foreign_key(op.f('AgentInteraction_conversation_id_fkey'), 'AgentInteraction', 'Conversation', ['conversation_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key(op.f('AgentInteraction_agent_id_fkey'), 'AgentInteraction', 'Agent', ['agent_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key(op.f('AgentInteraction_previous_agent_id_fkey'), 'AgentInteraction', 'Agent', ['previous_agent_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_index(op.f('AgentInteraction_conversation_id_idx'), 'AgentInteraction', ['conversation_id'], unique=False)
    op.create_index(op.f('AgentInteraction_agent_id_idx'), 'AgentInteraction', ['agent_id'], unique=False)
    op.alter_column('AgentInteraction', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               nullable=False)
    op.alter_column('AgentInteraction', 'previous_agent_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('AgentInteraction', 'conversation_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('AgentInteraction', 'agent_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('AgentInteraction', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint(None, 'Agent', type_='foreignkey')
    op.create_foreign_key(op.f('Agent_company_id_fkey'), 'Agent', 'Company', ['company_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key(op.f('fk_agent_template'), 'Agent', 'PromptTemplate', ['template_id'], ['id'])
    op.create_foreign_key(op.f('Agent_user_id_fkey'), 'Agent', 'User', ['user_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_index(op.f('idx_agents_user_id'), 'Agent', ['user_id'], unique=False)
    op.create_index(op.f('agent_template_id_idx'), 'Agent', ['template_id'], unique=False)
    op.alter_column('Agent', 'image_processing_config',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=sa.text('\'{"max_images": 1000, "confidence_threshold": 0.7, "enable_auto_description": true}\'::jsonb'),
               existing_nullable=True)
    op.alter_column('Agent', 'image_processing_enabled',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=True)
    op.alter_column('Agent', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=True)
    op.alter_column('Agent', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=6),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=True)
    op.alter_column('Agent', 'average_response_time',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               server_default=sa.text('0.0'),
               existing_nullable=True)
    op.alter_column('Agent', 'success_rate',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               server_default=sa.text('0.0'),
               existing_nullable=True)
    op.alter_column('Agent', 'average_confidence',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               server_default=sa.text('0.0'),
               existing_nullable=True)
    op.alter_column('Agent', 'total_interactions',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               existing_nullable=True)
    op.alter_column('Agent', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               nullable=False)
    op.alter_column('Agent', 'temperature',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               server_default=sa.text('0.7'),
               existing_nullable=True)
    op.alter_column('Agent', 'max_response_tokens',
               existing_type=sa.INTEGER(),
               server_default=sa.text('200'),
               existing_nullable=True)
    op.alter_column('Agent', 'confidence_threshold',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               server_default=sa.text('0.7'),
               existing_nullable=True)
    op.alter_column('Agent', 'search_config',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=sa.text('\'{"limit": 5, "score_threshold": 0.7, "include_metadata": true}\'::jsonb'),
               existing_nullable=True)
    op.alter_column('Agent', 'database_integration_ids',
               existing_type=postgresql.ARRAY(sa.String()),
               server_default=sa.text('ARRAY[]::text[]'),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('Agent', 'knowledge_base_ids',
               existing_type=postgresql.ARRAY(sa.String()),
               server_default=sa.text('ARRAY[]::text[]'),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('Agent', 'advanced_settings',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('Agent', 'additional_context',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('Agent', 'files',
               existing_type=postgresql.ARRAY(sa.VARCHAR(length=255)),
               server_default=sa.text('(ARRAY[]::character varying[])::character varying(255)[]'),
               existing_nullable=True)
    op.alter_column('Agent', 'company_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('Agent', 'type',
               existing_type=sa.Enum('base', 'sales', 'support', 'technical', 'custom', name='agenttype'),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.alter_column('Agent', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.create_table('Session',
    sa.Column('sessionToken', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('expires', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['User.id'], name=op.f('Session_userId_fkey'), onupdate='CASCADE', ondelete='CASCADE')
    )
    op.create_index(op.f('Session_sessionToken_key'), 'Session', ['sessionToken'], unique=True)
    op.create_table('campaign_lead',
    sa.Column('id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('campaign_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('first_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('company', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('custom_fields', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('call_attempts', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('last_call_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['campaign_id'], ['campaign.id'], name='campaign_lead_campaign_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='campaign_lead_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_campaign_lead_status'), 'campaign_lead', ['status'], unique=False)
    op.create_index(op.f('idx_campaign_lead_campaign_id'), 'campaign_lead', ['campaign_id'], unique=False)
    op.create_table('PromptTemplate',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('category', postgresql.ENUM('general', 'customer_service', 'sales', 'booking', 'technical', 'content', 'educational', 'research', 'industry_specific', name='prompttemplatecategory'), autoincrement=False, nullable=False),
    sa.Column('agent_type', postgresql.ENUM('base', 'sales', 'support', 'technical', 'custom', name='agenttype'), autoincrement=False, nullable=False),
    sa.Column('variables', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('is_default', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_system', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('company_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['Company.id'], name='PromptTemplate_company_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='PromptTemplate_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('prompt_template_company_id_idx'), 'PromptTemplate', ['company_id'], unique=False)
    op.create_index(op.f('prompt_template_category_idx'), 'PromptTemplate', ['category'], unique=False)
    op.create_index(op.f('prompt_template_agent_type_idx'), 'PromptTemplate', ['agent_type'], unique=False)
    op.create_table('booking',
    sa.Column('id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('campaign_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('customer', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('slot_start', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('slot_end', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=False),
    sa.Column('customer_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('customer_phone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('booking_pkey'))
    )
    op.create_index(op.f('idx_booking_status'), 'booking', ['status'], unique=False)
    op.create_index(op.f('idx_booking_slot_times'), 'booking', ['slot_start', 'slot_end'], unique=False)
    op.create_index(op.f('idx_booking_campaign'), 'booking', ['campaign_id'], unique=False)
    op.create_table('leads',
    sa.Column('id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('campaign_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('company', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('custom_fields', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('call_attempts', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('last_called_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'new'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['campaign_id'], ['campaign.id'], name=op.f('fk_leads_campaign'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('leads_pkey'))
    )
    op.create_table('Invitation',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('role', sa.TEXT(), server_default=sa.text("'member'::text"), autoincrement=False, nullable=False),
    sa.Column('token', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('accepted_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'pending'::text"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['Company.id'], name=op.f('Invitation_company_id_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('Invitation_pkey'))
    )
    op.create_index(op.f('Invitation_token_key'), 'Invitation', ['token'], unique=True)
    op.create_index(op.f('Invitation_token_idx'), 'Invitation', ['token'], unique=False)
    op.create_index(op.f('Invitation_status_idx'), 'Invitation', ['status'], unique=False)
    op.create_index(op.f('Invitation_email_idx'), 'Invitation', ['email'], unique=False)
    op.create_index(op.f('Invitation_company_id_idx'), 'Invitation', ['company_id'], unique=False)
    op.create_table('calendar_integrations',
    sa.Column('id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('calendar_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('calendar_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('calendar_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('credentials', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('is_primary', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('last_sync', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='calendar_integrations_pkey'),
    sa.UniqueConstraint('company_id', 'calendar_id', name='calendar_integrations_company_id_calendar_id_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_calendar_integrations_user'), 'calendar_integrations', ['user_id'], unique=False)
    op.create_index(op.f('idx_calendar_integrations_type'), 'calendar_integrations', ['calendar_type'], unique=False)
    op.create_index(op.f('idx_calendar_integrations_company'), 'calendar_integrations', ['company_id'], unique=False)
    op.create_index(op.f('idx_calendar_integrations_active'), 'calendar_integrations', ['is_active'], unique=False)
    op.create_table('calendar_events',
    sa.Column('id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('calendar_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('location', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('attendees', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('meeting_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('external_event_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('cancellation_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['calendar_id'], ['calendar_integrations.id'], name=op.f('calendar_events_calendar_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('calendar_events_pkey'))
    )
    op.create_table('campaign_agents',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('campaign_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('agent_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['agent_id'], ['Agent.id'], name=op.f('campaign_agents_agent_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['campaign_id'], ['campaign.id'], name=op.f('campaign_agents_campaign_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('campaign_agents_pkey')),
    sa.UniqueConstraint('campaign_id', 'agent_id', name=op.f('campaign_agents_campaign_id_agent_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('campaign_metrics_daily',
    sa.Column('campaign_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('calls_handled', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('calls_success', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('bookings_made', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('revenue_generated', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('campaign_id', 'date', name=op.f('campaign_metrics_daily_pkey'))
    )
    op.create_table('VerificationToken',
    sa.Column('identifier', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('token', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('expires', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('identifier', 'token', name=op.f('VerificationToken_pkey'))
    )
    op.create_table('call_log',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('campaign_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('agent_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('customer', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('outcome', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('duration_sec', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('recorded_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('call_log_pkey'))
    )
    op.create_table('invitations',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=50), server_default=sa.text("'member'::character varying"), autoincrement=False, nullable=True),
    sa.Column('token', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('accepted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'accepted'::character varying, 'expired'::character varying, 'cancelled'::character varying]::text[])", name=op.f('invitations_status_check')),
    sa.ForeignKeyConstraint(['company_id'], ['Company.id'], name=op.f('fk_company'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('invitations_pkey')),
    sa.UniqueConstraint('token', name=op.f('invitations_token_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_invitations_token'), 'invitations', ['token'], unique=False)
    op.create_index(op.f('idx_invitations_status'), 'invitations', ['status'], unique=False)
    op.create_index(op.f('idx_invitations_expires_at'), 'invitations', ['expires_at'], unique=False)
    op.create_index(op.f('idx_invitations_email'), 'invitations', ['email'], unique=False)
    op.create_index(op.f('idx_invitations_company_id'), 'invitations', ['company_id'], unique=False)
    op.create_table('CompanyMember',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('role', sa.TEXT(), server_default=sa.text("'member'::text"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['Company.id'], name=op.f('CompanyMember_company_id_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['User.id'], name=op.f('CompanyMember_user_id_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('CompanyMember_pkey'))
    )
    op.create_index(op.f('CompanyMember_user_id_idx'), 'CompanyMember', ['user_id'], unique=False)
    op.create_index(op.f('CompanyMember_user_id_company_id_key'), 'CompanyMember', ['user_id', 'company_id'], unique=True)
    op.create_index(op.f('CompanyMember_company_id_idx'), 'CompanyMember', ['company_id'], unique=False)
    op.create_table('campaign_activity',
    sa.Column('id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('campaign_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('lead_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('activity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['campaign_id'], ['campaign.id'], name=op.f('campaign_activity_campaign_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['lead_id'], ['campaign_lead.id'], name=op.f('campaign_activity_lead_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('campaign_activity_pkey'))
    )
    op.create_index(op.f('idx_campaign_activity_lead_id'), 'campaign_activity', ['lead_id'], unique=False)
    op.create_index(op.f('idx_campaign_activity_campaign_id'), 'campaign_activity', ['campaign_id'], unique=False)
    op.create_table('activities',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('action', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['User.id'], name=op.f('fk_activities_user'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('activities_pkey'))
    )
    op.create_index(op.f('idx_activities_user_id'), 'activities', ['user_id'], unique=False)
    op.create_index(op.f('idx_activities_entity_type'), 'activities', ['entity_type'], unique=False)
    op.create_index(op.f('idx_activities_created_at'), 'activities', [sa.literal_column('created_at DESC')], unique=False)
    op.create_table('campaign',
    sa.Column('id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('campaign_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('company_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('leads_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('csv_file_path', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('data_mapping', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('booking_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('automation_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('email_settings', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('call_settings', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('schedule_settings', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('campaign_pkey'))
    )
    op.create_index(op.f('idx_campaign_schedule_settings'), 'campaign', ['schedule_settings'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_campaign_email_settings'), 'campaign', ['email_settings'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_campaign_company_id'), 'campaign', ['company_id'], unique=False)
    op.create_index(op.f('idx_campaign_call_settings'), 'campaign', ['call_settings'], unique=False, postgresql_using='gin')
    op.create_table('Activity',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('action', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=6), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['User.id'], name=op.f('Activity_user_id_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('Activity_pkey'))
    )
    op.create_index(op.f('Activity_user_id_idx'), 'Activity', ['user_id'], unique=False)
    op.create_index(op.f('Activity_entity_type_entity_id_idx'), 'Activity', ['entity_type', 'entity_id'], unique=False)
    op.create_index(op.f('Activity_created_at_idx'), 'Activity', ['created_at'], unique=False)
    op.create_table('email_templates',
    sa.Column('id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('subject', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('body', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('template_type', sa.VARCHAR(length=50), server_default=sa.text("'campaign'::character varying"), autoincrement=False, nullable=True),
    sa.Column('variables', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('is_default', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('email_templates_pkey')),
    sa.UniqueConstraint('company_id', 'name', name=op.f('email_templates_company_id_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_email_templates_type'), 'email_templates', ['template_type'], unique=False)
    op.create_index(op.f('idx_email_templates_default'), 'email_templates', ['is_default'], unique=False, postgresql_where='(is_default = true)')
    op.create_index(op.f('idx_email_templates_company'), 'email_templates', ['company_id'], unique=False)
    op.create_table('conversation_outcome',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('call_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('user_phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('conversation_duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('outcome', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('lead_score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('extracted_details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('agent_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('conversation_outcome_pkey')),
    sa.UniqueConstraint('call_id', name=op.f('conversation_outcome_call_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_conversation_outcome_outcome'), 'conversation_outcome', ['outcome'], unique=False)
    op.create_index(op.f('idx_conversation_outcome_created_at'), 'conversation_outcome', ['created_at'], unique=False)
    op.create_index(op.f('idx_conversation_outcome_agent_id'), 'conversation_outcome', ['agent_id'], unique=False)
    op.create_table('campaign_call_status',
    sa.Column('campaign_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'idle'::character varying"), autoincrement=False, nullable=False),
    sa.Column('active_calls', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('queue_size', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('current_lead_position', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('total_leads', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('successful_calls', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('failed_calls', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('progress_percentage', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('estimated_completion', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_call_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('campaign_id', 'company_id', name=op.f('campaign_call_status_pkey'))
    )
    op.create_table('conversation',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('call_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('user_phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('agent_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('outcome', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('transcript', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('duration', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('conversation_pkey')),
    sa.UniqueConstraint('call_id', name=op.f('conversation_call_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_conversation_created_at'), 'conversation', ['created_at'], unique=False)
    op.create_index(op.f('idx_conversation_call_id'), 'conversation', ['call_id'], unique=False)
    op.create_index(op.f('idx_conversation_agent_id'), 'conversation', ['agent_id'], unique=False)
    op.create_table('Account',
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('provider', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('providerAccountId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('refresh_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('access_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('expires_at', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('token_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('scope', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('session_state', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['User.id'], name=op.f('Account_userId_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('provider', 'providerAccountId', name=op.f('Account_pkey'))
    )
    op.create_table('campaign_metrics_current',
    sa.Column('campaign_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('calls_handled', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('calls_success', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('bookings_made', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('revenue_generated', sa.NUMERIC(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('campaign_id', name=op.f('campaign_metrics_current_pkey'))
    )
    op.create_table('OTP',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('code', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('expiresAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('OTP_pkey'))
    )
    op.create_index(op.f('OTP_email_idx'), 'OTP', ['email'], unique=False)
    op.create_table('whatsapp_messages',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('business_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('message_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('to_phone', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('from_phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('message_type', sa.VARCHAR(length=50), server_default=sa.text("'text'::character varying"), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'sent'::character varying"), autoincrement=False, nullable=False),
    sa.Column('direction', sa.VARCHAR(length=20), server_default=sa.text("'outbound'::character varying"), autoincrement=False, nullable=False),
    sa.Column('template_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('media_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('media_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('timestamp_sent', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('timestamp_delivered', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('timestamp_read', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['business_id'], ['whatsapp_clients.business_id'], name=op.f('fk_whatsapp_messages_business'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('whatsapp_messages_pkey')),
    sa.UniqueConstraint('message_id', name=op.f('whatsapp_messages_message_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_whatsapp_messages_to_phone'), 'whatsapp_messages', ['to_phone'], unique=False)
    op.create_index(op.f('idx_whatsapp_messages_status'), 'whatsapp_messages', ['status'], unique=False)
    op.create_index(op.f('idx_whatsapp_messages_message_id'), 'whatsapp_messages', ['message_id'], unique=False)
    op.create_index(op.f('idx_whatsapp_messages_direction'), 'whatsapp_messages', ['direction'], unique=False)
    op.create_index(op.f('idx_whatsapp_messages_created_at'), 'whatsapp_messages', ['created_at'], unique=False)
    op.create_index(op.f('idx_whatsapp_messages_business_id'), 'whatsapp_messages', ['business_id'], unique=False)
    op.create_table('_prisma_migrations',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('checksum', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('finished_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('migration_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('logs', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('rolled_back_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('applied_steps_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('_prisma_migrations_pkey'))
    )
    op.create_table('calendar_blocks',
    sa.Column('id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('calendar_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['calendar_id'], ['calendar_integrations.id'], name=op.f('calendar_blocks_calendar_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('calendar_blocks_pkey'))
    )
    op.create_table('User',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('emailVerified', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('image', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('User_pkey'))
    )
    op.create_index(op.f('User_email_key'), 'User', ['email'], unique=True)
    op.create_table('whatsapp_clients',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('business_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('waba_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('phone_number_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('access_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'PENDING'::character varying"), autoincrement=False, nullable=False),
    sa.Column('current_step', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='whatsapp_clients_pkey'),
    sa.UniqueConstraint('business_id', name='whatsapp_clients_business_id_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_whatsapp_clients_status'), 'whatsapp_clients', ['status'], unique=False)
    op.create_index(op.f('idx_whatsapp_clients_created_at'), 'whatsapp_clients', ['created_at'], unique=False)
    op.create_index(op.f('idx_whatsapp_clients_business_id'), 'whatsapp_clients', ['business_id'], unique=False)
    op.create_table('TaskQueue',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('task_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=False),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('result', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('retry_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('max_retries', sa.INTEGER(), server_default=sa.text('3'), autoincrement=False, nullable=False),
    sa.Column('next_retry_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('company_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('agent_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('conversation_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('call_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('TaskQueue_pkey'))
    )
    op.create_index(op.f('ix_taskqueue_task_type'), 'TaskQueue', ['task_type'], unique=False)
    op.create_index(op.f('ix_taskqueue_status_retry'), 'TaskQueue', ['status', 'next_retry_at'], unique=False)
    op.create_index(op.f('ix_taskqueue_company_id'), 'TaskQueue', ['company_id'], unique=False)
    op.create_table('whatsapp_webhooks',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('webhook_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('business_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('event_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('processed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('processing_error', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('processed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('whatsapp_webhooks_pkey'))
    )
    op.create_index(op.f('idx_whatsapp_webhooks_processed'), 'whatsapp_webhooks', ['processed'], unique=False)
    op.create_index(op.f('idx_whatsapp_webhooks_event_type'), 'whatsapp_webhooks', ['event_type'], unique=False)
    op.create_index(op.f('idx_whatsapp_webhooks_created_at'), 'whatsapp_webhooks', ['created_at'], unique=False)
    op.create_index(op.f('idx_whatsapp_webhooks_business_id'), 'whatsapp_webhooks', ['business_id'], unique=False)
    op.create_table('notification_logs',
    sa.Column('id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('notification_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('recipient_email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('booking_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('sent_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('delivery_status', sa.VARCHAR(length=50), server_default=sa.text("'sent'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('notification_logs_pkey'))
    )
    op.create_table('whatsapp_templates',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('business_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('template_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('language_code', sa.VARCHAR(length=10), server_default=sa.text("'en'::character varying"), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'PENDING'::character varying"), autoincrement=False, nullable=False),
    sa.Column('components', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('template_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['business_id'], ['whatsapp_clients.business_id'], name=op.f('fk_whatsapp_templates_business'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('whatsapp_templates_pkey')),
    sa.UniqueConstraint('business_id', 'template_name', 'language_code', name=op.f('whatsapp_templates_business_id_template_name_language_code_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_whatsapp_templates_status'), 'whatsapp_templates', ['status'], unique=False)
    op.create_index(op.f('idx_whatsapp_templates_name'), 'whatsapp_templates', ['template_name'], unique=False)
    op.create_index(op.f('idx_whatsapp_templates_business_id'), 'whatsapp_templates', ['business_id'], unique=False)
    op.drop_index(op.f('ix_ConversationTurn_call_sid'), table_name='ConversationTurn')
    op.drop_table('ConversationTurn')
    op.drop_index(op.f('ix_CallEvent_call_sid'), table_name='CallEvent')
    op.drop_table('CallEvent')
    op.drop_index(op.f('ix_CeleryTaskMap_task_id'), table_name='CeleryTaskMap')
    op.drop_index(op.f('ix_CeleryTaskMap_call_sid'), table_name='CeleryTaskMap')
    op.drop_table('CeleryTaskMap')
    # ### end Alembic commands ###
